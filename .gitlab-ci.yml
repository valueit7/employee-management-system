image: ubuntu:latest

services:
  - docker:dind

#variables:
#  DOCKER_DRIVER: overlay2
#  DOCKER_TLS_CERTDIR: ""

#before_script:
 # - echo "Forcing bash shell..."
  #- export SHELL=/bin/bash
  #- which bash
  #- bash --version
  #- apt-get update && apt-get install -y docker-compose jq curl  # Use apt-get to install docker-compose, jq et curl
  #- echo "Available shells:"
  #- cat /etc/shells
  #- docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"



stages:
  #- build
  - deploy

# Build images with Docker Compose
#build:
#  stage: build
#  script:
#    - docker-compose -f docker-compose.yml build
#    - docker tag spring-app $CI_REGISTRY_IMAGE/spring-app:$CI_COMMIT_REF_NAME
#    - docker tag angular-app $CI_REGISTRY_IMAGE/angular-app:$CI_COMMIT_REF_NAME
#    - docker push $CI_REGISTRY_IMAGE/spring-app:$CI_COMMIT_REF_NAME
#    - docker push $CI_REGISTRY_IMAGE/angular-app:$CI_COMMIT_REF_NAME
#  tags:
#    - localrunner
#    - localshell
#  only:
#    - main  

# Deploy images locally
deploy:
  stage: deploy
  script:
    - echo "Deploying Release $RELEASE_VERSION to Prod environment"
#    - docker pull $CI_REGISTRY_IMAGE/spring-app:$CI_COMMIT_REF_NAME
#    - docker pull $CI_REGISTRY_IMAGE/angular-app:$CI_COMMIT_REF_NAME
#    - docker tag $CI_REGISTRY_IMAGE/spring-app:$CI_COMMIT_REF_NAME spring-app
#    - docker tag $CI_REGISTRY_IMAGE/angular-app:$CI_COMMIT_REF_NAME angular-app
#    - echo "Deploying to Docker Desktop..."
#    - docker-compose -f docker-compose.yml up -d
  environment:
    name: Prod
    url: http://localhost:4200 
  tags:
    - localrunner
    - localshell 
  only:
    - main
  variables:
    RELEASE_VERSION: "Release 1.0.0"
       
  





#image: ubuntu:latest

#stages:
#  - noop

#noop_job:
#  stage: noop
#  script:
#    - echo "This job does nothing."